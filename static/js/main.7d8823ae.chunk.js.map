{"version":3,"sources":["logo.svg","axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","FetchDocumentaries","Banner","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","Nav","show","handleShow","window","addEventListener","scrollY","Window","removeEventListener","type","placeholder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7d8823ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, {useState, useEffect} from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchUrl, isLargeRow}) {\n\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {autoplay: 1,}\n    }\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then(url => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n            }).catch((error) => console.log(error));\n        }\n    };\n\n    return(\n        <div className = \"row\">\n            <h2 className = \"row_title\">{title}</h2>\n            <div className = \"row_posters\">\n                {movies.map(movie => (\n                    <img \n                    key = {movie.id}\n                    onClick = {() => handleClick(movie)}\n                    className = {`row_poster ${isLargeRow && \"row_posterLarge\"}`} \n                    src = {`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                    alt = {movie.name}/>\n                ))}\n            </div> \n            {trailerUrl && <YouTube videoId = {trailerUrl} opts = {opts}/>}\n        </div>\n    )\n}\n\nexport default Row;","const API_KEY = \"12290eda1b96f9daa32aea1e6e77c450\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with-genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with-genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with-genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with-genres=10749`,\n    FetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with-genres=99`,\n}\n\nexport default requests;","import React, {useState, useEffect} from 'react';\nimport axios from './axios';\nimport requests from './requests';\nimport './Banner.css'; \n\nfunction Banner() {   \n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(request.data.results[\n                Math.floor(Math.random() * request.data.results.length - 1)]);\n                return request;\n        }\n        fetchData();\n    }, []);\n\n    return(\n        <header className = \"banner\"\n            style = {{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: \"centre center\",\n            }}\n        >\n            <div className = \"banner_contents\">\n                <h1 className = \"banner_title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div className = \"banner_buttons\">\n                    <button className = \"banner_button1\">Play</button>\n                    <button className = \"banner_button2\">More info</button>\n                </div>\n            </div>\n            <div className = \"banner_fadetop\"></div>\n            <div className = \"banner_fadeBottom\"></div>\n        </header>\n    )\n}\n\nexport default Banner;","import React, { useEffect, useState } from 'react';\nimport './Nav.css';\n\nfunction Nav() {\n    const [show, handleShow] = useState(false)\n    \n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else handleShow(false);\n        });\n        return() => {\n            Window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n    return(\n    <div className = {`nav ${show && \"nav_black\"}`}>\n        <img className = \"nav_logo\" \n          src = \"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n          alt = \"Netflix Logo\"\n        />\n        <input className = \"nav_input\" type = \"text\" placeholder = \"Title, people, genres\" />\n        <p className = \"p1\" >Home</p>\n        <p className = \"p2\">TV Shows</p>\n        <p className = \"p3\">Movies</p>\n        <p className = \"p4\">Latest</p>\n        <p className = \"p5\">My List</p>\n    </div>\n  );\n}\n\nexport default Nav;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner/>\n      <Row title = \" Netflix Originals\" \n      fetchUrl = {requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title = \"Trending Now\" fetchUrl = {requests.fetchTrending}/>\n      <Row title = \"Top Rated\" fetchUrl = {requests.fetchTopRated}/>\n      <Row title = \"Action Movies\" fetchUrl = {requests.fetchActionMovies}/>\n      <Row title = \"Comedy Movies\" fetchUrl = {requests.fetchComedyMovies}/>\n      <Row title = \"Horror Movies\" fetchUrl = {requests.fetchHorrorMovies}/>\n      <Row title = \"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies}/>\n      <Row title = \"Documentaries\" fetchUrl = {requests.FetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}